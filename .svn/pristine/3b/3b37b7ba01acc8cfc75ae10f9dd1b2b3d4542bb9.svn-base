// traversing genealogical tree using Composite and Visitors
// Mikhail Nesterenko
// 10/28/2015

#include <iostream>
#include <string>
#include <vector>
#include "tree.h"


using std::cout; using std::endl; using std::cin;
using std::string;
using std::vector;

class Person { // component
public:
    Person(string firstName, Person* spouse, Person* father, Person* mother) :
        firstName_(firstName), spouse_(spouse), father_(father), mother_(mother) {}
    const string& getFirstName() { return firstName_; }
    Person* getSpouse() { return spouse_; }
    void setSpouse(Person* spouse) { spouse_ = spouse; }
    Person* getFather() { return father_; }

    virtual void accept(class PersonVisitor*) = 0;
    virtual ~Person() {}
private:
    const string firstName_;
    Person* spouse_;
    Person* father_;
    Person* mother_;
};


// leaf
// man has a last name 
class Man : public Person {
public:
    Man(string lastName, string firstName, Person* spouse,
        Person* father, Person* mother) :
        lastName_(lastName),
        Person(firstName, spouse, father, mother) {}
    const string& getLastName() { return lastName_; }
    void accept(class PersonVisitor* visitor) override;
private:
    const string lastName_;
};

// composite
// woman has a list of children
class Woman : public Person {
public:
    Woman(vector<Person*> children,
        string firstName,
        Person* spouse,
        Person* father, Person* mother) :
        children_(children),
        Person(firstName, spouse, father, mother) {}
    const vector<Person*>& getChildren() {
        return children_;
    }
    void setChildren(const vector<Person*>& children) {
        children_ = children;
    }
    void accept(class PersonVisitor* visitor) override;
private:
    vector<Person*> children_;
};

// abstract visitor
class PersonVisitor {
public:
    virtual void visit(Man*) = 0;
    virtual void visit(Woman*) = 0;
    virtual void visitMadenName(Woman*) = 0; // DELETE THIS AND MAKE MADEN NAME CLASS WITH OWN VISIT VERSON
 // -----------------------------------


    virtual ~PersonVisitor() {}
};

// composite methods that define traversal
void Man::accept(PersonVisitor* visitor) {
    visitor->visit(this);
    if (this->getSpouse() != nullptr) {
        visitor->visit(static_cast<Woman*>(this->getSpouse())); // visits the mans spouse to get all the names
        //visitor->visitMadenName(static_cast<Woman*>(this->getSpouse())); // gets the maden name of the spouse -------------------------
    }
}
static int x;
void Woman::accept(PersonVisitor* visitor) {
    // children traversal through mother only
    // father's children are not traversed so as not 
    // to traverse them twice: for mother and father
    visitor->visit(this);
   // visitor->visitMadenName(this); //-----------------------------
    // traversing descendants
    if (this->getSpouse() != nullptr) {
        visitor->visit(static_cast<Man*>(this->getSpouse()));
    }
    for (auto child : children_) {
       // visitor->visitMadenName(static_cast<Woman*>(child));
        child->accept(visitor);
       
       
    }

}

// concrete visitors
// the last name for a man is stored in object
// the last name a woman is determined by her 
// spouse if she is married
// or by her father if she is not
class NamePrinter : public PersonVisitor {
public:
    void visit(Man* m) override {
        cout << m->getFirstName() << " " <<
            m->getLastName() << endl;
    }
    void visit(Woman* w) override {
        cout << w->getFirstName() << " ";
        if (w->getSpouse() != nullptr)
            cout << static_cast<Man*> (w->getSpouse())->getLastName();
        else if (w->getFather() != nullptr)
            cout << static_cast<Man*> (w->getFather())->getLastName();
        else
            cout << "Doe";
        cout << endl;
    }
    void visitMadenName(Woman *w) override {
        if (w->getFather() != nullptr) {
            cout << w->getFirstName() << "'s maden name is: " << static_cast<Man*> (w->getFather())->getLastName() <<endl;
        }
        else {
            cout << w->getFirstName() << "'s maden name is: " << "Doe";
            cout << endl;
        }
      
    }
   

};

class Compatibility : public PersonVisitor {//------------------------------------------------
public:
    Compatibility(string canidate1 = "", string canidate2 = ""):canidate1_(canidate1), canidate2_(canidate2) {}
    void visit(Man* m) override {
        //cout << "Man Visited" << endl;
            
        if ((m->getFirstName() + " " + m->getLastName()) == canidate1_) {
           // Person* p1 = static_cast<Person*>(m);
            p1 = m;
            cout << "Person 1 set to man" << p1->getFirstName()<< endl;
        }
        if ((m->getFirstName() + " " + m->getLastName()) == canidate2_) {
            // Person* p2 = static_cast<Person*>(m);
            p2 = m;
            cout << "Person 2 set to man: " <<p2->getFirstName() <<endl;
        }

    
    }
    void visit(Woman* w)override {
     /*  cout << "Women Visited" << endl;
        cout << "canidate1: " << canidate1_ << endl;
        cout << "canidate2: " << canidate2_ << endl;
        */
        string wName = (w->getFirstName() + " ");
        if (w->getSpouse() != nullptr) { wName += static_cast<Man*> (w->getSpouse())->getLastName(); }
        else if (w->getFather() != nullptr) { wName += static_cast<Man*> (w->getFather())->getLastName(); }
        else { wName += "Doe"; }
        
        if (wName == canidate1_) {
            p1 = w;
            cout << "Person 1 set to Woman" << p1->getFirstName() << endl;
        }
        if (wName == canidate2_) {
            p2 = w;
            cout << "Person 2 set to Woman:" << p2->getFirstName() << endl;
        }
       
      
    }

    bool canMarry() {
        if (p1 == nullptr || p2 == nullptr) {
            cout << "enter valid canidate" << endl; return false;
        }
        string canidate1LastName = canidate1_, canidate2LastName = canidate2_;
        int pos = canidate1LastName.find_first_of(" ");
        canidate1LastName.erase(canidate1LastName.begin(), canidate1LastName.begin()+ pos + 1);
       

        pos = canidate2LastName.find_first_of(" ");
        canidate2LastName.erase(canidate2LastName.begin(), canidate2LastName.begin() + pos + 1);
       
        if (canidate1_ == canidate2_) {
             return false;
        }
      
    
        if (p1->getSpouse() != nullptr && p2->getSpouse() != nullptr) {
            return false;
        }
        
        if (p1->getFather() != nullptr && p2->getFather() != nullptr) {
                // if last names are differesnt they may have the one of the same parents
            if (p1->getFather()->getFirstName() + static_cast<Man*>(p1->getFather())->getLastName()
                == p2->getFather()->getFirstName() + static_cast<Man*>(p2->getFather())->getLastName()) { // if fathers are the same
               // cout << " Same Dad" << endl;
                return false;  
            }
            if (p1->getFather()->getSpouse() != nullptr && p2->getFather()->getSpouse() != nullptr) {
                if (p1->getFather()->getSpouse()->getFirstName() + static_cast<Man*>(p1->getFather())->getLastName()  // if mothers are the same
                    == p2->getFather()->getSpouse()->getFirstName() + static_cast<Man*>(p2->getFather())->getLastName()) {
                    return false;
                }
            
            
            }
         }
        if (canidate1LastName == canidate2LastName) { // if last names are the same meaning may be siblings or have parent child-relationship
            return false;
        }
        
        return true;
    }
    void visitMadenName(Woman* w) override { //------------------------------------
        cout << "";
    }
    
    void setCanidate1(const string s) {
         canidate1_ = s;
    }

    void setCanidate2(const string s){
        canidate2_ = s;
    }
    bool getCanMarry() const { return canMarry_; }
private:
    Person* p1;
    Person* p2;
    string canidate1_;
    string canidate2_;
    bool canMarry_ = false;
};
class ChildrenPrinter : public PersonVisitor {
public:
    void visit(Man* m) override {
        cout << m->getFirstName() << ": ";
        Woman* spouse = static_cast<Woman*>(m->getSpouse());
        if (spouse != nullptr)
            printNames(spouse->getChildren());
        cout << endl;
    }
    void visit(Woman* w) override {
        cout << w->getFirstName() << ": ";
        printNames(w->getChildren());
        cout << endl;
    }
    
    void visitMadenName(Woman* w) override {
        if (w->getFather() != nullptr) {
            cout << w->getFirstName() << "'s maden name is: " << static_cast<Man*> (w->getFather())->getLastName()<<endl;

        }
        else {
            cout << w->getFirstName() << "'s maden name is: " << "Doe";
            cout << endl;
        }
  }
  

 
private:
    void printNames(const vector<Person*>& children) {
        for (const auto c : children)
            cout << c->getFirstName() << ", ";
    }
};


// demonstrating the operation
int main() {

    // setting up the genealogical tree      
    // the tree is as follows
    //    
    //
    //       James Smith  <--spouse-->   Mary 
    //	                                  |
    //	                                 children -------------------------
    //	                                  |              |                |
    //	                                  |              |                |
    //	   William Johnson <--spouse-> Patricia      Robert Smith       Linda
    //	                                  |
    //	                                 children------------
    //	                                  |                 |
    //                                     |                 |
    //	   Jennifer  <--spouse-->  Michael Johnson      Barbara
    //	       |
    //	     children
    //	       |
    //          |
    //	     Susan


    // first generation
    Man* js = new Man("Smith", "James", nullptr, nullptr, nullptr);
    Woman* ms = new Woman({}, "Mary", nullptr, nullptr, nullptr);
    ms->setSpouse(js); js->setSpouse(ms);

    // second generation
    Woman* ps = new Woman({}, "Patricia", nullptr, js, ms);
    Man* wj = new Man("Johnson", "William", nullptr, nullptr, nullptr);
    ps->setSpouse(wj); wj->setSpouse(ps);

    vector<Person*> marysKids = { ps,
                       new Man("Smith", "Robert", nullptr, js, ms),
                       new Woman({}, "Linda", nullptr, js, ms) };
    ms->setChildren(marysKids);

    // third generation
    Man* mj = new Man("Johnson", "Michael", nullptr, wj, ps);
    vector<Person*> patsKids = { mj, new Woman({}, "Barbara", nullptr, wj, ps) };
    ps->setChildren(patsKids);

    Woman* jj = new Woman({}, "Jennifer", nullptr, nullptr, nullptr);
    vector<Person*> jensKids = { new Woman({}, "Susan", nullptr, mj ,jj) };

    jj->setSpouse(mj); mj->setSpouse(jj);
    jj->setChildren(jensKids);


    // defining two visitors
    ChildrenPrinter* cp = new ChildrenPrinter;
    NamePrinter* np = new NamePrinter;

    // executing the traversal with the composite
    // and the specific visitor

    cout << "\nNAME LIST\n";
    ms->accept(np);

    cout << endl << endl;
    
    cout << "CHILDREN LIST\n";
    ms->accept(cp);
    
    //cout << "\nJAMES' CHILDREN\n";
    //js->accept(cp);
    string candidate1, candidate2;
    Compatibility* cmp = new Compatibility;
    cout << "Check for marriage compatibility" << endl;
    cout << "Enter first candidate: ";
   std::getline(std::cin, candidate1);
    cmp->setCanidate1(candidate1);
   
    cout << "Enter second candidate: ";
    std::getline(std::cin, candidate2);
    cmp->setCanidate2(candidate2);
    
    
    
    ms->accept(cmp);
    if (cmp->canMarry()) {
        cout << "Can Marry" << endl;
    }
    else {
        cout << "Can't Marry" << endl;
    }

    if (cmp->getCanMarry()) {
        cout << "Same Dad Working" << endl;
    }
}
