//Sam Hill's State Pattern Process model
#include <iostream>
#include <string>
using std::cin; using std::cout; using std::endl; using std::string;

class State;

class Process {
public:
	Process();
	//behaviors
	void admitted();
	void interrupt();
	void ioWait();
	void ioCompletion();
	void schedularDispatch();
	void exit();
	void terminate();
	string report();

	void changState(State* s) { //changes state of process
		state_ = s;
	}

 static const int proccesID = 0;
private:
	State* state_;

};




class State {

public:
	
	virtual void admitted(Process*) {}
	virtual void interrupt(Process*) {}
	virtual void ioWait(Process*) {}
	virtual void ioCompletion(Process*) {}
	virtual void schedularDispatch(Process*) {}
	virtual void exit(Process*) {}
	virtual void terminate(Process*) {}
	
	virtual string report() = 0;
	
	void changeState(Process* p, State* s) {
		p->changState(s);
		
	}


};

class NewP : public State {
public:
	static State* instance() {
		static State* onlyInstance = new NewP;
		return onlyInstance;
	}
	string report() override {
		return "Process is being made";
	}

	//void admitted(Process*) override;
private:
	

};
// New Behavior

class Ready : public State {
public:
	static State* instance() {
		static State* onlyInstance = new Ready;
		return onlyInstance;
	}

	string report() override {
		return "Process is Ready";
	}

	//void schedularDispatch(Process*) override;


};

class Running : public State {

	static State* instance() {
		static State* onlyInstance = new Running;
		return onlyInstance;
	}
	string report() override {
		return "Process is Running";
	}
};


Process::Process() {
	state_ = NewP::instance();
}

// behaviors of process class\


void Process::admitted() { state_->admitted(this); };
void Process::interrupt() { state_->interrupt(this); }
void Process::ioWait() { state_->interrupt(this); }
void Process::ioCompletion() { state_->ioCompletion(this); }
void Process::schedularDispatch() { state_->schedularDispatch(this); }
void Process::exit() { state_->exit(this); }
void Process::terminate() { delete state_; }

string Process::report() { return state_->report(); }
