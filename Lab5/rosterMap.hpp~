#ifndef rosterMap_HPP_
#define rosterMap_HPP_


#include <fstream>
#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <cstdlib>
#include <map>

using std::ifstream;
using std::string; using std::getline;
using std::list; using std::vector;
using std::cout; using std::endl;
using std::move; using std::map;
using std::pair;


class Student {
public:
	Student(string firstName, string lastName) :
		firstName_(firstName), lastName_(lastName) {}

	// move constructor, not really needed, generated automatically
	/*
	Student(Student&& org) :
		firstName_(move(org.firstName_)),
		lastName_(move(org.lastName_))
	{}
	*/
	// force generation of default copy constructor
	Student(const Student& org) = default;

	string print() const { return firstName_ + ' ' + lastName_; }

	// needed for unique() and for remove()
	friend bool operator== (Student left, Student right) {
		return left.lastName_ == right.lastName_ &&
			left.firstName_ == right.firstName_;
	}

	// needed for sort()
	friend bool operator< (Student left, Student right) {
		return left.lastName_ < right.lastName_ ||
			(left.lastName_ == right.lastName_ &&
				left.firstName_ < right.firstName_);
	}
	string getFirst()const { return firstName_; } // returns first name
	string getLast()const { return lastName_; } // returns last name
private:
	string firstName_;
	string lastName_;
};


void readRoster(map<Student, list<string>> roster, string fileName) {
	ifstream course(fileName);
	string first, last;
	string coursefile = fileName;                           // name of the file
	int pos = coursefile.find_first_of('.');
	string courseName = coursefile.erase(pos);        // creates the course name from the name of the file
	
	list<string> courses;
	while (course >> first >> last) {
		bool found = false;

/*
		for (auto it = roster.begin(); it != roster.end(); ++it) {
			auto find = roster.find(it->first);
			
		}
		*/
		
		courses.push_back(courseName);
		roster.emplace(Student(first, last), courses);
		//cout << roster.size() << endl;

	}	
	course.close();
}

// printing a list out
void printRoster(const map<Student, list<string>> roster) {
	for (const auto& student : roster)
		cout << student.first.print() << endl;
	

}

#endif
